module Diagrams
  # Abstract base class for all diagram types.
  # Provides common functionality like versioning, checksum calculation,
  # serialization, and equality comparison.
  class Base
    # Provides `==`, `eql?`, and `hash` methods based on specified attributes.
    include Dry::Equalizer

    # User-defined version identifier (e.g., Integer or String).
    attr_reader version: Integer | String

    # SHA256 checksum of the diagram's content (hex string). Nil until calculated.
    attr_reader checksum: String?

    # Initializes the base diagram attributes.
    # Subclasses should call super.
    # Cannot be called directly on Diagrams::Base.
    def initialize: (?version: Integer | String?) -> void

    # Abstract method: Subclasses must implement this to return a hash
    # representing their specific content, suitable for serialization.
    # @return [Hash[Symbol, untyped]]
    def to_h_content: () -> Hash[Symbol, untyped]

    # Abstract method: Subclasses must implement this to return a hash
    # mapping element type symbols (e.g., :nodes, :edges) to arrays
    # of the corresponding element objects within the diagram.
    # Used for comparison and diffing.
    # @return [Hash[Symbol, Array[untyped]]] # More specific types in subclasses
    def identifiable_elements: () -> Hash[Symbol, Array[untyped]]

    # Returns a hash representation of the diagram, suitable for serialization.
    # Includes common metadata and calls `#to_h_content` for specific data.
    # @return [Hash[Symbol, untyped]]
    def to_h: () -> Hash[Symbol, untyped]

    # Returns a JSON string representation of the diagram.
    # Delegates to `#to_h` and uses `JSON.generate`.
    # @param args Any arguments accepted by `JSON.generate`.
    # @return [String]
    def to_json: (*untyped args) -> String

    # --- Class methods for Deserialization ---

    # Deserializes a diagram from a hash representation.
    # Acts as a factory, dispatching to the appropriate subclass based on the 'type' field.
    # @param hash [Hash[Symbol | String, untyped]] The hash representation.
    # @return [Diagrams::Base] An instance of the specific diagram subclass.
    def self.from_hash: (Hash[Symbol | String, untyped] hash) -> Diagrams::Base

    # Deserializes a diagram from a JSON string.
    # Parses the JSON and delegates to `.from_hash`.
    # @param json_string [String] The JSON representation of the diagram.
    # @return [Diagrams::Base] An instance of the specific diagram subclass.
    def self.from_json: (String json_string) -> Diagrams::Base

    # Performs a basic diff against another diagram object.
    # @param other [Diagrams::Base] The diagram to compare against.
    # @return [Hash[Symbol, Hash[Symbol, Array[untyped]]]] A hash describing differences.
    def diff: (Diagrams::Base other) -> Hash[Symbol, Hash[Symbol, Array[untyped]]]

    # --- End Deserialization Methods ---

    # Recalculates the diagram's checksum based on its current content
    # and updates the @checksum instance variable.
    # Subclasses should call this after initialization and any mutation.
    # @return [String?] The new checksum value.
    def update_checksum!: () -> String?

    private

    # Computes the SHA256 checksum of the diagram's content.
    # @return [String] The hex digest of the checksum.
    def compute_checksum: () -> String
  end

  # --- Errors ---
  class ValidationError < StandardError
  end

  class EmptyDiagramError < ValidationError
  end

  class DuplicateLabelError < ValidationError
  end
end
